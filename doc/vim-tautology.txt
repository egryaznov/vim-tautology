*vim-tautology.txt*  Plugin to detect and mark recurring words in text

Author: Evgeniy Gryaznov <http://github.com/egryaznov>
License: WTFPL (http://www.wtfpl.net/about/)

This plugin is only available if you have a python3 interpreter installed on
your computer and the command `python3` is available.

INTRODUCTION                                    *vim-tautology*

If you like me then you often repeat yourself when writing a piece of English text. The same word can occur multiple times in the same
paragraph, which makes a reader bored and frustrated. For instance, consider the following passage:

I was in school today. School is still the same old, dull place that it always was. Today an old man came to me and asked about my
place. I didn't answer because I was late for school.

Notice that the words "school", "old", "today", "place" are redundant and must be replaced to increase the readability of the text.
Such pesky recurring words can be hard to trace, so I've created this plugin to facilitate the process.

The plugin marks all tautologies in a given piece of text by prefixing them with a specified symbol, '@' by default.

HOW TO USE                                      *how-to-use*

There are two pre-defined commands `TautologyMark` and `TautologyClear`. The former marks all tautologies in selected text, and
latter removes all inserted marks. Step-by-step usage:

0. Set the variable `g:tautology_dir` to the path to directory of this plugin. Default is `~/.vim/plugged/vim-tautology`.
1. Select the text you want to snoop for tautologies, for example with `vip`:
2. Run `:TautologyMark`
**I @was in school @today. School is still the same @old, dull @place that it always @was. @Today an @old man came to me and asked
about my @place. I didn't answer because I @was late for school.**
3. Circle through with `/@\w*`, edit, remove or replace them with synonyms, etc...
4. When you done, simply `gv` and run `:TautologyClear`, this will remove all marks that are still left.


MAPPINGS                                        *vim-tautology-mappings*

                                                *gz* *TautologyMark*
                                                *gZ* *TautologyClear*
Of course, typing all these commands is laborious, so you can set `g:tautology_mappings = 1` to use `gz` as `:TautologyMark` and `gZ` as
`:TautologyClear`. Please note that these mappings work only in **visual mode.**

CONFIGURATION                                   *vim-tautology-configuration*

There are 6 main variables that let you control the behaviour of this plugin:

1. `g:tautology_dir`. Path to the directory of this plugin. Please set
this variable manually to ensure the correct workings of the plugin. Default
is `~/.vim/plugged/vim-tautology`.
2. `g:tautology_mark`. The string that will be used as a prefix to recurring words. Default value is `@`.
3. `g:tautology_stop_words`. The list of words that are too ubiquitous to consider, like "and", "the", "as" and so on. The words in this list
   will be omitted when marking tautologies. Default is `['I', 'the', 'a', 'an', 'to', 'be', 'of', 'and', 'in', 'that', 'this',
   'as']`, but now it cannot be appended, only redefined.
4. `g:tautology_min_length`. Skip words which are below this length. Useful to
avoid clumping of marks. Default is `4`.
5. `g:tautology_window_size`. Controls how many words behind the examined word is compared with. Default is `30`.
6. `g:tautology_skip`. Controls how many words directly before the examined word is skipped to prevent overabundance of marks.

Last two variables define the so-called **window** of tautologies. For example, suppose `window_size = 6`, `tautology_skip = 2` and current
word is `dog`, then the window in the following text will be:

The quick [brown fox jumps over] the lazy dog.

ISSUES                                 *vim-tautology-issues* *vim-tautology-todo*

Currently a sharp symbol `#` cannot be set as a mark, because Vim treats it as a name of *alternate file* (see `:h alternate-file`).
Avoid it and use `@` instead. This problem may be fixed soon.

The global variable `g:tautology_stop_words` cannot be appended with `+=`, only redefined.

 vim:tw=78:ts=8:ft=help:norl:
